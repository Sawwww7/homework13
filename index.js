/*Напишіть функцію, яка рекурсивно обчислює n-те число Фібоначчі. Числа Фібоначчі визначаються як послідовність,
 у якій кожне число дорівнює сумі двох попередніх чисел (наприклад, 0, 1, 1, 2, 3, 5, 8 і так далі).
  Використовуйте рекурсію для обчислення чисел Фібоначчі.*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
function fib(n) {
  return n <= 1 ? n : fib(n - 1) + fib(n - 2);
}

console.log(fib(1)) //1
console.log(fib(3)); // 2
console.log(fib(7)); // 13
console.log(fib(20)) // 6765

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/*Попрацюємо з числовим паліндромом. Числовий паліндром — це натуральне число,
 яке читається зліва направо і справа наліво однаково. Інакше кажучи,
відрізняється симетрією запису (розташування цифр), причому число знаків може бути як парним,
так і непарним. Але. Паліндром можна отримати як результат операцій над іншими числами.
Візьмемо будь-яке натуральне число і складемо його зі зворотним числом,
тобто записаним тими самими цифрами, але у зворотному порядку. 
Проробимо ту саму дію з сумою, що вийшла, і будемо повторювати її доти,
доки не утвориться паліндром. Іноді достатньо зробити всього один крок 
(наприклад, 312 + 213 = 525), але, як правило, потрібно не менше двох. 
Скажімо, число 96 породжує паліндром 4884 тільки на четвертому кроці.... 
Вам потрібно написати функцію, яка повертатиме об'єкт, де буде властивість
result і це буде паліндром, і властивість steps — це число викликів до знаходження паліндрома.
Для того, щоб перевірити себе використовуйте число 196. Це так зване Lychrel number — число яке немає поліндрому*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////
const isPalindroms = (num, steps = 0) => {  
  if (num === 196){return `This is the so-called Lychrel number - a number that is not a polydrome.`}
  
  const result = num.toString();
  const revers = result.split("").reverse().join("");  
 //return result===revers ? {num, steps} : isPalindroms(num + parseInt(revers), steps+1)

  
  if (result === revers) {return{result: num, steps};   
}else {
  return isPalindroms(num + parseInt(revers), steps+1);   
  }  
};

console.log(isPalindroms(96)); // {result: 4884, steps: 4}
console.log(isPalindroms(121)); // {result: 121, steps: 0}
console.log(isPalindroms(196)); // This is the so-called Lychrel number - a number that is not a polydrome.

/////////////////////////////////////////////////////////////////////////////////////////////////////////

/*Напишіть функцію, яка приймає масив унікальних елементів і генерує всі можливі перестановки цього масиву.
 Використовуйте рекурсію для знаходження всіх перестановок. Наприклад, якщо вхідний масив [1, 2, 3], 
 функція має повернути масив, що містить [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [2, 3, 1], [3, 1, 2] і [3, 2, 1].*/

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


let permArr = [],
  usedChars = [];

function getVariants(input) {
  let ch;
  input.forEach((nombers, index) => {
    ch = input.splice(index, 1)[0];
    debugger
    usedChars.push(ch);
    if (input.length == 0) {
      permArr.push(usedChars.slice());
    }
    getVariants(input);
    input.splice(index, 0, ch);
    usedChars.pop();
  });
  return permArr;
}

console.log(getVariants([1, 2, 3]));

////////////////////////////////////////////////////////////////////////////////